#include <iostream>
#include <string>
#include "Stack.h"

using namespace std;

struct Trabajo {
    string archivo;
    int numPaginas;

    friend ostream& operator<<(ostream& os, const Trabajo& t) {
        os<<"Archivo: " <<t.archivo<<", Páginas: " <<t.numPaginas;
        return os;
    }
};

class Impresora {
private:
    Stack<Trabajo> entrada;
    Stack<Trabajo> salida;

public:
    void agregarTrabajo(const Trabajo& t) {
        entrada.push(t);
        cout<<"Trabajo agregado: "<<t<<endl;
    }

    void procesarTrabajo() {
        if (salida.isEmpty()) {
            while (!entrada.isEmpty()) {
                Trabajo t;
                entrada.pop(t);
                salida.push(t);
            }
        }

        Trabajo t;
        if (salida.pop(t)) {
            cout<<"Procesando trabajo: " <<t<<endl;
        } else {
            cout<<"No hay trabajos en la cola de impresión."<<endl;
        }
    }

    void siguienteTrabajo() {
        Trabajo t;
        if (salida.peek(t)) {
            cout<<"Siguiente trabajo a imprimir: " <<t<<endl;
        } else {
            cout<<"No hay trabajos en la cola de impresión."<<endl;
        }
    }

    void mostrarEstado() {
        cout<<"Trabajos en espera (en orden de llegada):"<<endl;

        Stack<Trabajo> temp=entrada;
        while (!temp.isEmpty()) {
            Trabajo t;
            temp.pop(t);
            cout<<t<<endl;
        }

        if (entrada.isEmpty() && salida.isEmpty()) {
            cout<<"No hay trabajos pendientes."<<endl;
        }
    }
};

int main() {
    Impresora impresora;
    int opcion;
    string archivo;
    int numPaginas;

    do {
        cout<<"-----------Menú de impresion----------" << endl;
        cout<<"---------------------------------------"<<endl;
        cout<<"1. Agregar trabajo de impresión" << endl;
        cout<<"2. Procesar siguiente trabajo" << endl;
        cout<< "3. Ver siguiente trabajo a imprimir" << endl;
        cout<<"4. Mostrar estado de la cola de impresión" << endl;
        cout<<"5. Salir" << endl;
        cout<<"-----------------------------------------"<<endl;

        cout<<"Ingrese una opción: ";
        cin>> opcion;
        cin.ignore();

        if (opcion==1) {
            Trabajo t;
            cout<<"Ingrese nombre del archivo: ";
            getline(cin, t.archivo);
            cout<<"Ingrese número de páginas: ";
            cin>>t.numPaginas;
            cin.ignore();
            impresora.agregarTrabajo(t);
        } else if (opcion==2) {
            impresora.procesarTrabajo();
        } else if (opcion==3) {
            impresora.siguienteTrabajo();
        } else if (opcion==4) {
            impresora.mostrarEstado();
        }
    } while (opcion!=5);
    return 0;
}

Libreria usada: 
#ifndef STACK_H
#define STACK_H

#include <iostream>
#include <stdexcept>

using namespace std;

template<typename T>
class Stack {
private:
    class Node {
    public:
        T data;
        Node *next;

        Node(const T &value, Node *next = nullptr) : data(value), next(next) {}
    };

    Node *top;
    int count;

public:
    Stack() : top(nullptr), count(0) {}

    ~Stack() {
        while (top != nullptr) {
            Node *temp = top;
            top = top->next;
            delete temp;
        }
    }

    void push(const T &value) {
        Node *newNode = new Node(value, top);
        top = newNode;
        count++;
    }

    bool pop(T &value) {
        if (isEmpty()) {
            return false;
        }
        value = top->data;
        Node *temp = top;
        top = top->next;
        delete temp;
        count--;
        return true;
    }

    bool peek(T &value) const {
        if (isEmpty()) {
            return false;
        }
        value = top->data;
        return true;
    }

    bool isEmpty() const {
        return top == nullptr;
    }

    int getSize() const {
        return count;
    }

    void print() const {
        Node *current = top;
        while (current != nullptr) {
            cout << current->data << " -> ";
            current = current->next;
        }
        cout << "NULL" << endl;
    }
};

#endif // STACK_H
